#include <vector>
#include <limits>

// Assume matrixvalue and empty are defined as per HPC conventions:
using matrixvalue = unsigned;
const matrixvalue empty = std::numeric_limits<matrixvalue>::max();

// A simple Vector class as used in HPC examples
class Vector {
private:
    std::vector<matrixvalue> data;
public:
    Vector(int n, matrixvalue val=0) : data((size_t)n, val) {}
    
    matrixvalue& operator[](int i) { return data[(size_t)i]; }
    const matrixvalue& operator[](int i) const { return data[(size_t)i]; }
    int size() const { return (int)data.size(); }
};

class AdjacencyMatrix {
private:
    std::vector<std::vector<matrixvalue>> adjacency;
public:
    AdjacencyMatrix(int n)
        : adjacency(std::vector<std::vector<matrixvalue>>(
            (size_t)n, std::vector<matrixvalue>((size_t)n, empty))) {}

    int size() const { return (int)adjacency.size(); }

    // The leftmultiply routine:
    // This follows HPC style, performing a matrix-vector multiplication.
    Vector leftmultiply(const Vector &left) const {
        int n = size();
        Vector result(n, 0); // Initialize result vector with zeros or a suitable default.

        // Define add and mult as per HPC snippet logic:
        auto add = [](matrixvalue a, matrixvalue b) {
            // In actual HPC code, these operations might be specialized.
            // Here we assume standard addition with handling of 'empty':
            if (a == empty) return b;
            if (b == empty) return a;
            return a + b;
        };

        auto mult = [](matrixvalue a, matrixvalue b) {
            // Similarly handle 'empty':
            if (a == empty || b == empty) return empty;
            return a * b;
        };

        // Core of the multiplication routine as suggested by HPC snippet
        for (int row=0; row<n; ++row) {
            for (int col=0; col<n; ++col) {
                result[col] = add(result[col], mult(left[row], adjacency[row][col]));
            }
        }

        return result;
    }
};

int main() {
    // Example usage:
    int n = 4;
    AdjacencyMatrix graph(n);

    // Suppose we set some edges (weights):
    // graph adjacency[row][col] = weight
    // e.g. graph of size 4 with a few edges:
    // graph.adjacency[0][1] = 3; graph.adjacency[0][2] = 5; ... etc.
    // This would be done if we had a setter method. For now, assume it's filled appropriately.

    Vector left(n, 1); // Example input vector with all ones
    Vector result = graph.leftmultiply(left);

    // print result
    for (int i = 0; i < n; i++) {
        if (result[i] == empty)
            std::cout << "result[" << i << "] = empty\n";
        else
            std::cout << "result[" << i << "] = " << result[i] << "\n";
    }

    return 0;
}
